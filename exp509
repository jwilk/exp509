#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2017-2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import datetime
import socket
import ssl
import sys
import time

0_0  # Python >= 3.6 is required

def main():
    ap = argparse.ArgumentParser()
    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue9694
        ap._optionals.title = 'options'
    ap.add_argument('-t', '--threshold', metavar='N', required=True,
        help='alert when cert expires in N days (or less)',
        type=int,
    )
    ap.add_argument('-T', '--TAP', action='store_true', help='use TAP output')
    ap.add_argument('hosts', metavar='HOST[:PORT]', nargs='+')
    options = ap.parse_args()
    threshold = datetime.timedelta(days=options.threshold)
    context = ssl.create_default_context()
    rc = 0
    if options.TAP:
        print(1, '..', len(options.hosts), sep='')
        def diag(*args):
            print('#', *args)
        tap_n = 0
        def tap(status, msg):
            nonlocal tap_n
            tap_n += 1
            print(status, tap_n, msg)
    else:
        diag = print
        def tap(status, msg):
            pass
    for host in options.hosts:
        orig_host = host
        if ':' in host:
            host, port = host.rsplit(':')
            port = int(port)
        else:
            port = 443
        tsock = context.wrap_socket(
            socket.socket(),
            server_hostname=host
        )
        try:
            tsock.connect((host, port))
            cert = tsock.getpeercert()
        except (ssl.SSLError, ssl.CertificateError) as exp:
            diag(f'{orig_host}: error: {exp}')
            tap('not ok', orig_host)
            rc = 1
            continue
        finally:
            tsock.close()
        exp = cert['notAfter']
        exp = datetime.datetime.strptime(exp, '%b %d %H:%M:%S %Y GMT')
        exp = exp.replace(tzinfo=datetime.timezone.utc)
        now = datetime.datetime.now(datetime.timezone.utc)
        if (exp - now < threshold):
            lexp = time.localtime(exp.timestamp())
            lexp = time.strftime('%Y-%m-%d %H:%M', lexp)
            diag(f'{orig_host}: certificate expires on {lexp}')
            tap('not ok', orig_host)
            rc = 1
        else:
            tap('ok', orig_host)
    if not options.TAP:
        sys.exit(rc)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
